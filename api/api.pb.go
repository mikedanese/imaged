// Code generated by protoc-gen-go.
// source: api.proto
// DO NOT EDIT!

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	ObjectMeta
	Void
	Status
	Condition
	Image
	ImageList
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ObjectMeta struct {
	Name              string                     `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	CreationTimestamp *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=creation_timestamp,json=creationTimestamp" json:"creation_timestamp,omitempty"`
	DeletionTimestamp *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=deletion_timestamp,json=deletionTimestamp" json:"deletion_timestamp,omitempty"`
	Labels            map[string]string          `protobuf:"bytes,4,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Annotations       map[string]string          `protobuf:"bytes,5,rep,name=annotations" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ObjectMeta) Reset()                    { *m = ObjectMeta{} }
func (m *ObjectMeta) String() string            { return proto.CompactTextString(m) }
func (*ObjectMeta) ProtoMessage()               {}
func (*ObjectMeta) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ObjectMeta) GetCreationTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreationTimestamp
	}
	return nil
}

func (m *ObjectMeta) GetDeletionTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.DeletionTimestamp
	}
	return nil
}

func (m *ObjectMeta) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *ObjectMeta) GetAnnotations() map[string]string {
	if m != nil {
		return m.Annotations
	}
	return nil
}

type Void struct {
}

func (m *Void) Reset()                    { *m = Void{} }
func (m *Void) String() string            { return proto.CompactTextString(m) }
func (*Void) ProtoMessage()               {}
func (*Void) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Status struct {
	Conditions []*Condition `protobuf:"bytes,1,rep,name=conditions" json:"conditions,omitempty"`
}

func (m *Status) Reset()                    { *m = Status{} }
func (m *Status) String() string            { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Status) GetConditions() []*Condition {
	if m != nil {
		return m.Conditions
	}
	return nil
}

type Condition struct {
	Type           string                     `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Status         bool                       `protobuf:"varint,2,opt,name=status" json:"status,omitempty"`
	Reason         string                     `protobuf:"bytes,3,opt,name=reason" json:"reason,omitempty"`
	LastTransition *google_protobuf.Timestamp `protobuf:"bytes,4,opt,name=last_transition,json=lastTransition" json:"last_transition,omitempty"`
}

func (m *Condition) Reset()                    { *m = Condition{} }
func (m *Condition) String() string            { return proto.CompactTextString(m) }
func (*Condition) ProtoMessage()               {}
func (*Condition) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Condition) GetLastTransition() *google_protobuf.Timestamp {
	if m != nil {
		return m.LastTransition
	}
	return nil
}

type Image struct {
	Meta       *ObjectMeta  `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	Url        string       `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	Conditions []*Condition `protobuf:"bytes,3,rep,name=conditions" json:"conditions,omitempty"`
}

func (m *Image) Reset()                    { *m = Image{} }
func (m *Image) String() string            { return proto.CompactTextString(m) }
func (*Image) ProtoMessage()               {}
func (*Image) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Image) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *Image) GetConditions() []*Condition {
	if m != nil {
		return m.Conditions
	}
	return nil
}

type ImageList struct {
	Images []*Image `protobuf:"bytes,1,rep,name=images" json:"images,omitempty"`
}

func (m *ImageList) Reset()                    { *m = ImageList{} }
func (m *ImageList) String() string            { return proto.CompactTextString(m) }
func (*ImageList) ProtoMessage()               {}
func (*ImageList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ImageList) GetImages() []*Image {
	if m != nil {
		return m.Images
	}
	return nil
}

func init() {
	proto.RegisterType((*ObjectMeta)(nil), "ObjectMeta")
	proto.RegisterType((*Void)(nil), "Void")
	proto.RegisterType((*Status)(nil), "Status")
	proto.RegisterType((*Condition)(nil), "Condition")
	proto.RegisterType((*Image)(nil), "Image")
	proto.RegisterType((*ImageList)(nil), "ImageList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Images service

type ImagesClient interface {
	List(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ImageList, error)
	Create(ctx context.Context, in *Image, opts ...grpc.CallOption) (*Image, error)
	Delete(ctx context.Context, in *Image, opts ...grpc.CallOption) (*Image, error)
}

type imagesClient struct {
	cc *grpc.ClientConn
}

func NewImagesClient(cc *grpc.ClientConn) ImagesClient {
	return &imagesClient{cc}
}

func (c *imagesClient) List(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ImageList, error) {
	out := new(ImageList)
	err := grpc.Invoke(ctx, "/Images/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesClient) Create(ctx context.Context, in *Image, opts ...grpc.CallOption) (*Image, error) {
	out := new(Image)
	err := grpc.Invoke(ctx, "/Images/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesClient) Delete(ctx context.Context, in *Image, opts ...grpc.CallOption) (*Image, error) {
	out := new(Image)
	err := grpc.Invoke(ctx, "/Images/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Images service

type ImagesServer interface {
	List(context.Context, *Void) (*ImageList, error)
	Create(context.Context, *Image) (*Image, error)
	Delete(context.Context, *Image) (*Image, error)
}

func RegisterImagesServer(s *grpc.Server, srv ImagesServer) {
	s.RegisterService(&_Images_serviceDesc, srv)
}

func _Images_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Images/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).List(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Images_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Image)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Images/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).Create(ctx, req.(*Image))
	}
	return interceptor(ctx, in, info, handler)
}

func _Images_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Image)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Images/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).Delete(ctx, req.(*Image))
	}
	return interceptor(ctx, in, info, handler)
}

var _Images_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Images",
	HandlerType: (*ImagesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Images_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Images_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Images_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

// Client API for Blobs service

type BlobsClient interface {
}

type blobsClient struct {
	cc *grpc.ClientConn
}

func NewBlobsClient(cc *grpc.ClientConn) BlobsClient {
	return &blobsClient{cc}
}

// Server API for Blobs service

type BlobsServer interface {
}

func RegisterBlobsServer(s *grpc.Server, srv BlobsServer) {
	s.RegisterService(&_Blobs_serviceDesc, srv)
}

var _Blobs_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Blobs",
	HandlerType: (*BlobsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    fileDescriptor0,
}

// Client API for Bundles service

type BundlesClient interface {
}

type bundlesClient struct {
	cc *grpc.ClientConn
}

func NewBundlesClient(cc *grpc.ClientConn) BundlesClient {
	return &bundlesClient{cc}
}

// Server API for Bundles service

type BundlesServer interface {
}

func RegisterBundlesServer(s *grpc.Server, srv BundlesServer) {
	s.RegisterService(&_Bundles_serviceDesc, srv)
}

var _Bundles_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Bundles",
	HandlerType: (*BundlesServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    fileDescriptor0,
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 460 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x52, 0x4d, 0x8b, 0xd4, 0x40,
	0x10, 0x35, 0x9b, 0x8f, 0x35, 0x15, 0xd0, 0xb5, 0x11, 0x1d, 0xa2, 0xb8, 0x4b, 0x4e, 0xa2, 0xd0,
	0x03, 0xd1, 0x83, 0x7a, 0x58, 0x70, 0x47, 0x0f, 0x0b, 0x2b, 0x42, 0xbb, 0x78, 0x93, 0xa5, 0x33,
	0xd3, 0x3b, 0x44, 0x3b, 0xdd, 0x43, 0xba, 0x23, 0xcc, 0xff, 0xf0, 0x17, 0xf8, 0x4b, 0x4d, 0x57,
	0x3e, 0x26, 0x0c, 0xe2, 0xe0, 0x29, 0x55, 0xf5, 0xea, 0xbd, 0x4a, 0xbd, 0x6a, 0x88, 0xf9, 0xa6,
	0xa4, 0x9b, 0x5a, 0x5b, 0x9d, 0x9e, 0xae, 0xb5, 0x5e, 0x4b, 0x31, 0xc7, 0xac, 0x68, 0x6e, 0xe7,
	0xb6, 0xac, 0x84, 0xb1, 0xbc, 0xda, 0x74, 0x0d, 0xd9, 0x6f, 0x1f, 0xe0, 0x73, 0xf1, 0x5d, 0x2c,
	0xed, 0x27, 0x61, 0x39, 0x21, 0x10, 0x28, 0x5e, 0x89, 0x99, 0x77, 0xe6, 0x3d, 0x8f, 0x19, 0xc6,
	0xe4, 0x12, 0xc8, 0xb2, 0x16, 0xdc, 0x96, 0x5a, 0xdd, 0x8c, 0xf4, 0xd9, 0x51, 0xdb, 0x91, 0xe4,
	0x29, 0xed, 0x06, 0xd0, 0x61, 0x00, 0xbd, 0x1e, 0x3a, 0xd8, 0x83, 0x81, 0x35, 0x96, 0x9c, 0xd4,
	0x4a, 0x48, 0xb1, 0x27, 0xe5, 0x1f, 0x96, 0x1a, 0x58, 0x3b, 0xa9, 0x39, 0x44, 0x92, 0x17, 0x42,
	0x9a, 0x59, 0x70, 0xe6, 0xb7, 0xf4, 0xc7, 0x74, 0xb7, 0x06, 0xbd, 0x42, 0xe4, 0xa3, 0xb2, 0xf5,
	0x96, 0xf5, 0x6d, 0xe4, 0x1c, 0x12, 0xae, 0x94, 0xb6, 0xf8, 0x4b, 0x66, 0x16, 0x22, 0xeb, 0xe9,
	0x94, 0xf5, 0x7e, 0x07, 0x77, 0xd4, 0x29, 0x21, 0x7d, 0x0b, 0xc9, 0x44, 0x96, 0x9c, 0x80, 0xff,
	0x43, 0x6c, 0x7b, 0xa3, 0x5c, 0x48, 0x1e, 0x42, 0xf8, 0x93, 0xcb, 0x46, 0xa0, 0x35, 0x31, 0xeb,
	0x92, 0x77, 0x47, 0x6f, 0xbc, 0xf4, 0x1c, 0x4e, 0xf6, 0xb5, 0xff, 0x87, 0x9f, 0x45, 0x10, 0x7c,
	0xd5, 0xe5, 0x2a, 0x7b, 0x0d, 0xd1, 0x97, 0x56, 0xa4, 0x31, 0xe4, 0x05, 0xc0, 0x52, 0xab, 0x55,
	0xd9, 0xed, 0xe2, 0xe1, 0x2e, 0x40, 0x17, 0x43, 0x89, 0x4d, 0xd0, 0xec, 0x97, 0x07, 0xf1, 0x88,
	0xb8, 0x0b, 0xdb, 0xed, 0x66, 0xbc, 0xb0, 0x8b, 0xc9, 0x23, 0x88, 0x0c, 0xea, 0xe2, 0xe8, 0xbb,
	0xac, 0xcf, 0x5c, 0xbd, 0x3d, 0xa1, 0xd1, 0x0a, 0x4f, 0x14, 0xb3, 0x3e, 0x23, 0x0b, 0xb8, 0x2f,
	0xb9, 0xb1, 0x37, 0xb6, 0xe6, 0xca, 0xa0, 0x6c, 0x7b, 0x84, 0x43, 0x37, 0xbc, 0xe7, 0x28, 0xd7,
	0x23, 0x23, 0xbb, 0x85, 0xf0, 0xb2, 0xe2, 0x6b, 0x41, 0x4e, 0x21, 0xa8, 0x5a, 0xfb, 0xf1, 0x8f,
	0x92, 0x3c, 0x99, 0x5c, 0x84, 0x21, 0xe0, 0xac, 0x6a, 0x6a, 0xd9, 0xdb, 0xe2, 0xc2, 0xbd, 0xf5,
	0xfd, 0x7f, 0xae, 0xff, 0x12, 0x62, 0x9c, 0x73, 0x55, 0x1a, 0x4b, 0x9e, 0x41, 0x54, 0xba, 0x64,
	0xf0, 0x2c, 0xa2, 0x88, 0xb1, 0xbe, 0x9a, 0x7f, 0x83, 0x08, 0x0b, 0x86, 0x3c, 0x81, 0x00, 0x19,
	0x21, 0x75, 0xd6, 0xa7, 0x40, 0x47, 0x91, 0xec, 0x0e, 0x49, 0x21, 0x5a, 0xb8, 0xc7, 0x2d, 0x48,
	0x2f, 0x90, 0xf6, 0xdf, 0x0e, 0xfb, 0xe0, 0x5e, 0xeb, 0x5f, 0xb0, 0xfc, 0x18, 0xc2, 0x0b, 0xa9,
	0x0b, 0x93, 0xc7, 0x70, 0x7c, 0xd1, 0xa8, 0x95, 0x14, 0xa6, 0x88, 0xd0, 0xab, 0x57, 0x7f, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x88, 0x93, 0xeb, 0xa1, 0xb6, 0x03, 0x00, 0x00,
}
